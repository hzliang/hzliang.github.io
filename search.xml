<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java虚拟机创建对象过程]]></title>
    <url>%2F2018%2F03%2F20%2FJava%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[Java虚拟机创建对象过程分配空间 是否能定位到类引用，否则的话要进行类加载 分配内存：指针碰撞法和空闲列表法，根据垃圾回收器而不同 分配方式：1. 使用CAS配上失败重试的方法包装更新的院子操作 2. 不同的线程预先分配一块内存TLAB，只有重新分配TLAB是才需要加锁 初始化对象 对象头(运行时数据):哈希码、GC分代年龄、锁状态标志、线程持有锁等 实例数据: 类字段数据，包括从父类继承下来的字段 对齐填充: 必须8字节其实位置 对象的访问定位 使用句柄：句柄池中放有实力数据和类型数据的指针 直接访问：堆中对象存储必须包含类型数据指针]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Java虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Data Leakage In Machine Learning]]></title>
    <url>%2F2018%2F03%2F13%2FData-Leakage-In-Machine-Learning%2F</url>
    <content type="text"><![CDATA[What is Data Leakage in Machine Learning?这里的数据泄漏更像是一种因果关系的泄漏，当某个特征是目标的果而不是因时，用该特征训练就会引进数据泄漏，所以在大数据时代不能仅仅关注数据的相关性，数据之间的因果关系同样重要。 if any other feature whose value would not actually be available in practice at the time you’d want to use the model to make a prediction, is a feature that can introduce leakage to your model.当某个特征的值在预测的时候还无法得到，该特征可能会导致模型泄漏(用未来的数据做训练或预测) when the data you are using to train a machine learning algorithm happens to have the information you are trying to predict当训练集数据中恰好有预测集数据(预处理，数据未完全分开) Do I have Data Leakage?如果你的模型性能特别好的话，比如Auc~0.9+，则要当心是否引入了泄漏特征。 总结：数据泄露就是说用了不该用的数据，比如 在训练模型时，利用了测试集的数据、信息(做归一化、均值、方差等要和验证机和测试集分开，用训练集的指标处理验证集和测试集) 在当前使用了未来的数据 在交叉验证进行调参时，使用了验证集的信息参与模型建立 Data Leakage in Machine LearningWhat is Data Leakage再论数据科学竞赛中的Data Leakage]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>Data Leakage</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[理解数据类型]]></title>
    <url>%2F2018%2F03%2F13%2F%E7%90%86%E8%A7%A3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[总体上来讲，数据可以分为两种类型：定量数据和定性数据。 定量数据定量数据一般指可以测量的指标，比如高度、宽度、长度、温度、价格、面积、体积等。 定量数据又可以分为连续型数据和离散型数据。 一般我们说数数是离散型的，而尺寸是连续性特征，离散型数据一般说的是整型，比如家里几口人、有几个孩子等，这种不可以再用小数表示了。 连续数据则能够分得更细，比如小孩的高度可以分到米、分米、厘米、毫米等 定性数据一般指描述性的特征，难以测量，但是可以观察到，比如味道、口味、颜色、吸引度等。 定性数据往往用来分类事物，一般包括三大类：0-1数据(好坏)、属性数据(颜色)、有序数据(矮、中、高)。]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Intriguing Properties Of Neural Networks]]></title>
    <url>%2F2018%2F03%2F12%2FIntriguing-Properties-Of-Neural-Networks%2F</url>
    <content type="text"><![CDATA[神经网络中两个有趣的特点 First, we find that there is no distinction between individual high level units and random linear combinations of high level units, according to various methods of unit analysis. It suggests that it is the space, rather than the individual units, that contains the semantic information in the high layers of neural networks. 高层级的网络激活单元不包含语义，语义存在于网络激活单元的空间向量中：某一次层的自然坐标和随机选择的激活单元组合得到的样本都有语义相似性。 Second, we find that deep neural networks learn input-output mappings that are fairly discontinuous to a significant extent. We can cause the network to misclas- sify an image by applying a certain hardly perceptible perturbation, which is found by maximizing the network’s prediction error. In addition, the specific nature of these perturbations is not a random artifact of learning: the same perturbation can cause a different network, that was trained on a different subset of the dataset, to misclassify the same input. 对抗样本：对训练集做一些轻微的扰动，产生的样本，在训练好的模型上很可能得到错误的预测，并且这些样本即使是在使用不同的网络层数，参数，训练集训练得到的模型都会有这种现象。]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>Neural learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[难分样本挖掘]]></title>
    <url>%2F2018%2F03%2F12%2FHard-Negative-Mining%2F</url>
    <content type="text"><![CDATA[Let’s say I give you a bunch of images that contain one or more people, and I give you bounding boxes for each one. Your classifier will need both positive training examples (person) and negative training examples (not person). For each person, you create a positive training example by looking inside that bounding box. But how do you create useful negative examples? A good way to start is to generate a bunch of random bounding boxes, and for each that doesn’t overlap with any of your positives, keep that new box as a negative. OK, so you have positives and negatives, so you train a classifier, and to test it out, you run it on your training images again with a sliding window. But it turns out that your classifier isn’t very good, because it throws a bunch of false positives (people detected where there aren’t actually people). A hard negative is when you take that falsely detected patch, and explicitly create a negative example out of that patch, and add that negative to your training set. When you retrain your classifier, it should perform better with this extra knowledge, and not make as many false positives. pyimagesearch Apply hard-negative mining. For each image and each possible scale of each image in your negative training set, apply the sliding window technique and slide your window across the image. At each window compute your HOG descriptors and apply your classifier. If your classifier (incorrectly) classifies a given window as an object (and it will, there will absolutely be false-positives), record the feature vector associated with the false-positive patch along with the probability of the classification. This approach is called hard-negative mining]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>Hard Negative Mining</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo next主题配置参考文档]]></title>
    <url>%2F2018%2F02%2F24%2Fhexo%2F</url>
    <content type="text"><![CDATA[1 2 3]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
